plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'pmd'
	id 'jacoco'
	id 'org.flywaydb.flyway' version '9.1.6'
}

group = 'com.boilerplate'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "17"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	all {
		exclude group: "org.slf4j", module: "slf4j-log4j2"
		exclude group: "org.slf4j", module: "slf4j-simple"
	}

	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "net.logstash.logback:logstash-logback-encoder:7.4"
	implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
	implementation 'com.squareup.retrofit2:retrofit:2.9.0'
	implementation "org.springframework.boot:spring-boot-starter-data-jdbc:2.7.3"

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "org.flywaydb:flyway-core:9.22.3"
	implementation "org.flywaydb:flyway-commandline:9.1.6"
	implementation 'io.micrometer:micrometer-core:1.9.4'
	implementation 'io.micrometer:micrometer-registry-statsd:1.9.4'

	implementation 'org.apache.commons:commons-lang3:3.17.0'
	implementation 'redis.clients:jedis:5.1.4'

	compileOnly 'org.projectlombok:lombok'
	compileOnly('com.newrelic.agent.java:newrelic-api:7.11.1')

	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.named('test') {
	useJUnitPlatform()

	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	dependsOn test

	reports {
		html.required = true
		xml.required = false
		csv.required = true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.21
			}
		}
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/boilerplate/spring_boot/db/migration/flyway/appconf",
					"com/boilerplate/spring_boot/commons/instrumentation",
					"com/boilerplate/spring_boot/commons/interceptor",
			])
		}))
	}
}

jacocoTestReport.dependsOn jacocoTestCoverageVerification

pmd {
	toolVersion '6.20.0'
	ruleSetFiles = files("$project.rootDir/rules-pmd.xml")
	sourceSets = [sourceSets.main, sourceSets.test]
	reportsDir = file("$project.buildDir/reports/pmd")
	ruleSets = []
}

task startServer(type: JavaExec) {
	main = 'com.boilerplate.spring_boot.Application'
	description = "Starts the Boilerplate Spring Boot."
	classpath = sourceSets.main.runtimeClasspath
	systemProperties = [
			"user.timezone": "UTC"
	]
}

task flywayMigrateMain(type: JavaExec) {
	main = 'com.boilerplate.spring_boot.db.migration.flyway.Migration'
	classpath = sourceSets.main.runtimeClasspath
}


